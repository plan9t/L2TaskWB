package main

import "fmt"

/*
	Реализовать паттерн «цепочка вызовов».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Chain-of-responsibility_pattern


"Цепочка вызовов" — это поведенческий паттерн проектирования,
который позволяет передавать запросы последовательно по цепочке обработчиков. Каждый обработчик решает, может ли он обработать запрос,
и либо обрабатывает его, либо передает следующему обработчику в цепочке.

Структура паттерна:
1. Handler (Обработчик): Определяет интерфейс для обработки запросов и содержит ссылку на следующий обработчик в цепочке.

2. ConcreteHandler (Конкретный обработчик): Реализует интерфейс Handler и обрабатывает запрос, если способен. В противном случае передает запрос следующему обработчику в цепочке.

3. Client (Клиент): Инициирует запрос и передает его первому объекту в цепочке.


ПЛЮСЫ:
			1. Гибкость и расширяемость: Позволяет добавлять новые обработчики без изменения существующего кода.
			Можно легко изменять порядок и состав обработчиков.

			2. Уменьшение зависимостей: Клиентский код зависит только от абстракции обработчика, что уменьшает связанность
			и облегчает тестирование и поддержку.

МИНУСЫ:
			1. Не гарантирует обработку: Нет гарантии, что запрос будет обработан вообще. Если цепочка не настроена правильно,
			запрос может достичь конца цепочки без обработки.

			2. Увеличение нагрузки: Весь путь цепочки может быть пройден, что может вызвать избыточные вычисления.

			3. Сложность отладки: Сложно отслеживать и понимать порядок обработки запроса, особенно в динамически создаваемых цепочках.



В примере "цепочку вызовов" используется для работы с заказами в интернет-магазине.
*/

// Order - структура, представляющая заказ
type Order struct {
	ID        int
	Product   string
	Quantity  int
	Confirmed bool
}

// SetProduct - метод для установки продукта в заказе
func (o *Order) SetProduct(product string) *Order {
	o.Product = product
	return o
}

// SetQuantity - метод для установки количества продукта в заказе
func (o *Order) SetQuantity(quantity int) *Order {
	o.Quantity = quantity
	return o
}

// ConfirmOrder - метод для подтверждения заказа
func (o *Order) ConfirmOrder() *Order {
	o.Confirmed = true
	return o
}

// PrintOrder - метод для вывода информации о заказе
func (o *Order) PrintOrder() {
	fmt.Printf("ID заказа: %d\nПродукт: %s\nКоличество: %d\nПодтверждён: %v\n", o.ID, o.Product, o.Quantity, o.Confirmed)
}

// NewOrder - функция для создания нового заказа с заданным ID
func NewOrder(id int) *Order {
	return &Order{ID: id}
}

func main() {
	// Использование цепочки вызовов для создания, настройки и подтверждения заказа
	order := NewOrder(123123).
		SetProduct("Apple").
		SetQuantity(15).
		ConfirmOrder()

	// Вывод информации о заказе
	order.PrintOrder()
}
